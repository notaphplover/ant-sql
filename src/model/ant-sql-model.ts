import { Entity, KeyGenParams } from '@antjs/ant-js';
import { AntModel } from '@antjs/ant-js/build/model/ant-model';
import { ApiSqlColumn } from '../api/api-sql-column';
import { SqlColumn } from './sql-column';
import { SqlModel } from './sql-model';
import { SqlType } from './sql-type';

export class AntSqlModel<TEntity extends Entity> extends AntModel<TEntity> implements SqlModel<TEntity> {
  /**
   * Model alias
   */
  protected _alias: string;
  /**
   * Auto generated column.
   */
  protected _autoGeneratedColumn: SqlColumn;
  /**
   * Map of table columns, including the id;
   * The key of the map is the alias of the column in the entities managed.
   * The value of the map is the column info.
   */
  protected _columns: Map<string, SqlColumn>;
  /**
   * Map of columns by type
   */
  protected _columnsByType: Map<SqlType, SqlColumn[]>;
  /**
   * Map of table colunms, including the id.
   * The key of the map is the alias of the column in the SQL table.
   * The value of the map is the column info.
   */
  protected _sqlColumns: Map<string, SqlColumn>;

  /**
   * SQL table name.
   */
  protected _tableName: string;

  /**
   * Constructor.
   * @param id Model's id.
   * @param keyGen Key generation config.
   * @param columns Model columns.
   * @param tableName SQL table name.
   * @param alias Model alias.
   */
  public constructor(
    id: string,
    keyGen: KeyGenParams,
    columns: Iterable<ApiSqlColumn>,
    tableName: string,
    alias?: string,
  ) {
    super(id, keyGen);

    this._alias = alias;
    this._initializeColumns(columns);
    this._tableName = tableName;
  }

  /**
   * Model's alias
   */
  public get alias(): string {
    return this._alias;
  }

  /**
   * Table columns.
   */
  public get columns(): Iterable<SqlColumn> {
    return this._columns.values();
  }

  /**
   * SQL table name.
   */
  public get tableName(): string {
    return this._tableName;
  }

  /**
   * Gets a column by its alias
   */
  public columnByAlias(alias: string): SqlColumn {
    return this._columns.get(alias);
  }

  /**
   * Gets a column by an SQL alias.
   * @param alias Alias of the column at the SQL server.
   * @returns Column.
   */
  public columnBySql(alias: string): SqlColumn {
    return this._sqlColumns.get(alias);
  }

  /**
   * Gets the auto generated column of the model.
   * @returns Auto generated column of the model or null if no column is auto generated.
   */
  public getAutoGeneratedColumn(): SqlColumn {
    return this._autoGeneratedColumn;
  }

  /**
   * @inheritdoc
   */
  public mPrimaryToEntity(primaries: any[]): TEntity[] {
    const dateColumns = this._columnsByType.get(SqlType.Date);
    if (undefined !== dateColumns) {
      for (const primary of primaries) {
        for (const column of dateColumns) {
          primary[column.entityAlias] = new Date(primary[column.entityAlias]);
        }
      }
    }
    return primaries;
  }

  /**
   * @inheritdoc
   */
  public primaryToEntity(primary: any): TEntity {
    const dateColumns = this._columnsByType.get(SqlType.Date);
    if (undefined !== dateColumns) {
      for (const column of dateColumns) {
        primary[column.entityAlias] = new Date(primary[column.entityAlias]);
      }
    }
    return primary;
  }

  /**
   * Generates a sql column from an API sql column
   * @param column Column to process.
   */
  private _apiColumnToColumn(column: ApiSqlColumn): SqlColumn {
    return {
      autoGenerationStrategy: column.autoGenerationStrategy,
      entityAlias: column.entityAlias,
      refAlias: column.refAlias,
      sqlName: column.sqlName,
      type: column.type,
    };
  }

  /**
   * Initializes the columns map.
   * @param columns Columns to set.
   */
  private _initializeColumns(columns: Iterable<ApiSqlColumn>): void {
    this._autoGeneratedColumn = null;
    this._columns = new Map();
    this._columnsByType = new Map();
    this._sqlColumns = new Map();
    for (const column of columns) {
      const modelColumn: SqlColumn = this._apiColumnToColumn(column);
      this._initializeColumnsSetInitialColumn(modelColumn);
      this._columns.set(modelColumn.entityAlias, modelColumn);
      this._sqlColumns.set(modelColumn.sqlName, modelColumn);
      this._initializeColumnsSetColumnsOfType(modelColumn);
    }
  }

  private _initializeColumnsSetColumnsOfType(column: SqlColumn): void {
    let columnsOfType = this._columnsByType.get(column.type);
    if (undefined === columnsOfType) {
      columnsOfType = new Array();
      this._columnsByType.set(column.type, columnsOfType);
    }
    columnsOfType.push(column);
  }

  private _initializeColumnsSetInitialColumn(column: SqlColumn): void {
    if (null != column.autoGenerationStrategy) {
      if (null === this._autoGeneratedColumn) {
        this._autoGeneratedColumn = column;
      } else {
        throw new Error('Unexpected auto generated column. There is already an auto generated column in this model');
      }
    }
  }
}
