import { Entity, KeyGenParams } from '@antjs/ant-js';
import { AntModel } from '@antjs/ant-js/build/model/ant-model';
import { SqlColumn } from './sql-column';
import { SqlModel } from './sql-model';

export class AntSqlModel<TEntity extends Entity> extends AntModel<TEntity> implements SqlModel<TEntity> {
  /**
   * Auto generated column.
   */
  protected _autoGeneratedColumn: SqlColumn;
  /**
   * Map of table columns, including the id;
   * The key of the map is the alias of the column in the entities managed.
   * The value of the map is the column info.
   */
  protected _columns: Map<string, SqlColumn>;

  /**
   * Map of table colunms, including the id.
   * The key of the map is the alias of the column in the SQL table.
   * The value of the map is the column info.
   */
  protected _sqlColumns: Map<string, SqlColumn>;

  /**
   * SQL table name.
   */
  protected _tableName: string;

  /**
   * Constructor.
   * @param id Model's id.
   * @param keyGen Key generation config.
   * @param tableName SQL table name.
   */
  public constructor(id: string, keyGen: KeyGenParams, columns: Iterable<SqlColumn>, tableName: string) {
    super(id, keyGen);

    this._initializeColumns(columns);
    this._tableName = tableName;
  }

  /**
   * Table columns.
   */
  public get columns(): Iterable<SqlColumn> {
    return this._columns.values();
  }

  /**
   * SQL table name.
   */
  public get tableName(): string {
    return this._tableName;
  }

  /**
   * Gets a column by its alias
   */
  public columnByAlias(alias: string): SqlColumn {
    return this._columns.get(alias);
  }

  /**
   * Gets a column by an SQL alias.
   * @param alias Alias of the column at the SQL server.
   * @returns Column.
   */
  public columnBySql(alias: string): SqlColumn {
    return this._sqlColumns.get(alias);
  }

  /**
   * Gets the auto generated column of the model.
   * @returns Auto generated column of the model or null if no column is auto generated.
   */
  public getAutoGeneratedColumn(): SqlColumn {
    return this._autoGeneratedColumn;
  }

  /**
   * Initializes the columns map.
   * @param columns Columns to set.
   */
  private _initializeColumns(columns: Iterable<SqlColumn>): void {
    this._autoGeneratedColumn = null;
    this._columns = new Map();
    this._sqlColumns = new Map();
    for (const column of columns) {
      if (null != column.autoGenerationStrategy) {
        if (null === this._autoGeneratedColumn) {
          this._autoGeneratedColumn = column;
        } else {
          throw new Error('Unexpected auto generated column. There is already an auto generated column in this model');
        }
      }
      this._columns.set(column.entityAlias, column);
      this._sqlColumns.set(column.sqlName, column);
    }
  }
}
