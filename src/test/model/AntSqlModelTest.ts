import { Test } from '@antjs/ant-js/src/testapi/api/test';
import { AntSqlModel } from '../../model/ant-sql-model';
import { AutoGeneratedStrategyMode } from '../../model/auto-generation-strategy-mode';
import { ApiSqlColumn } from '../../model/api-sql-column';

const MAX_SAFE_TIMEOUT = Math.pow(2, 31) - 1;

export class AntSqlModelTest implements Test {
  /**
   * Declare name for the test
   */
  protected _declareName: string;

  public constructor() {
    this._declareName = AntSqlModelTest.name;
  }

  public performTests(): void {
    describe(this._declareName, () => {
      this._itMustBeInitializable();
      this._itMustGetInitialValues();
      this._itMustGetAnAutogeneratedColumn();
      this._itMustNotAllowMultipleAutogeneratedColumns();
      this._itMustNotGetAnAutogeneratedColumn();
    });
  }

  private _itMustBeInitializable(): void {
    const itsName = 'mustBeInitializable';
    it(
      itsName,
      async (done) => {
        expect(() => {
          // tslint:disable-next-line:no-unused-expression
          new AntSqlModel(
            'id',
            { prefix: 'somePrefix' },
            [
              {
                entityAlias: 'id',
                sqlName: 'id',
              },
            ],
            'ModelSqlTableName',
          );
        }).not.toThrowError();
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustGetInitialValues(): void {
    const itsName = 'mustGetInitialValues';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
            },
          ],
          tableName,
        );
        expect(model.tableName).toBe(tableName);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustGetAnAutogeneratedColumn(): void {
    const itsName = 'mustGetAnAutogeneratedColumn';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column: ApiSqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
        };
        const model = new AntSqlModel('id', { prefix: 'somePrefix' }, [column], tableName);
        expect(model.getAutoGeneratedColumn()).toEqual(column);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustNotAllowMultipleAutogeneratedColumns(): void {
    const itsName = 'mustNotAllowMultipleAutogeneratedColumns';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column1: ApiSqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
        };
        const column2: ApiSqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'name',
          sqlName: 'name',
        };
        expect(() => new AntSqlModel('id', { prefix: 'somePrefix' }, [column1, column2], tableName)).toThrowError();
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustNotGetAnAutogeneratedColumn(): void {
    const itsName = 'mustNotGetAnAutogeneratedColumn';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
            },
          ],
          tableName,
        );
        expect(model.getAutoGeneratedColumn()).toBeNull();
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }
}
