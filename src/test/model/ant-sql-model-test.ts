import { AntSqlModel } from '../../model/ant-sql-model';
import { AutoGeneratedStrategyMode } from '../../model/auto-generation-strategy-mode';
import { Entity } from '@antjs/ant-js';
import { Reference } from '../../model/ref/reference';
import { SqlColumn } from '../../model/sql-column';
import { SqlType } from '../../model/sql-type';
import { Test } from '@antjs/ant-js/build/testapi/api/test';

const MAX_SAFE_TIMEOUT = Math.pow(2, 31) - 1;

export class AntSqlModelTest implements Test {
  /**
   * Declare name for the test
   */
  protected _declareName: string;

  public constructor() {
    this._declareName = AntSqlModelTest.name;
  }

  public performTests(): void {
    describe(this._declareName, () => {
      this._itMustBeInitializable();
      this._itMustGetAColumnByAlias();
      this._itMustGetAColumnBySqlAlias();
      this._itMustGetInitialValues();
      this._itMustGetAnAutogeneratedColumn();
      this._itMustListColumns();
      this._itMustNotAllowMultipleAutogeneratedColumns();
      this._itMustNotGetAnAutogeneratedColumn();
      this._itMustTransformEntityIntoPrimaryWithReferenceField();
      this._itMustTransformMultipleEntityIntoPrimaryWithReferenceField();
      this._itMustTransformMultiplePrimaryIntoEntityWithDateField();
      this._itMustTransformMultiplePrimaryIntoEntityWithReferenceField();
      this._itMustTransformMultipleSecondaryIntoEntityWithReferenceField();
      this._itMustTransformPrimaryIntoEntityWithDateField();
      this._itMustTransformPrimaryIntoEntityWithReferenceField();
      this._itMustTransformSecondaryIntoEntityWithReferenceField();
    });
  }

  private _itMustBeInitializable(): void {
    const itsName = 'mustBeInitializable';
    it(
      itsName,
      async (done) => {
        expect(() => {
          new AntSqlModel(
            'id',
            { prefix: 'somePrefix' },
            [
              {
                entityAlias: 'id',
                sqlName: 'id',
                type: SqlType.Integer,
              },
            ],
            'ModelSqlTableName',
          );
        }).not.toThrowError();
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustGetAColumnByAlias(): void {
    const itsName = 'mustGetAColumnByAlias';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
          type: SqlType.Integer,
        };
        const column2: SqlColumn = {
          entityAlias: 'someColumn',
          sqlName: 'some_column',
          type: SqlType.String,
        };
        const model = new AntSqlModel('id', { prefix: 'somePrefix' }, [column, column2], tableName);
        const foundColumn = model.columnByAlias(column2.entityAlias);

        expect(foundColumn.autoGenerationStrategy).toEqual(column2.autoGenerationStrategy);
        expect(foundColumn.entityAlias).toEqual(column2.entityAlias);
        expect(foundColumn.refAlias).toEqual(column2.refAlias);
        expect(foundColumn.sqlName).toEqual(column2.sqlName);
        expect(foundColumn.type).toEqual(column2.type);

        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustGetAColumnBySqlAlias(): void {
    const itsName = 'mustGetAColumnBySqlAlias';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
          type: SqlType.Integer,
        };
        const column2: SqlColumn = {
          entityAlias: 'someColumn',
          sqlName: 'some_column',
          type: SqlType.String,
        };
        const model = new AntSqlModel('id', { prefix: 'somePrefix' }, [column, column2], tableName);
        const foundColumn = model.columnBySql(column2.sqlName);
        expect(foundColumn.autoGenerationStrategy).toEqual(column2.autoGenerationStrategy);
        expect(foundColumn.entityAlias).toEqual(column2.entityAlias);
        expect(foundColumn.refAlias).toEqual(column2.refAlias);
        expect(foundColumn.sqlName).toEqual(column2.sqlName);
        expect(foundColumn.type).toEqual(column2.type);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustGetInitialValues(): void {
    const itsName = 'mustGetInitialValues';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
          ],
          tableName,
        );
        expect(model.tableName).toBe(tableName);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustGetAnAutogeneratedColumn(): void {
    const itsName = 'mustGetAnAutogeneratedColumn';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
          type: SqlType.Integer,
        };
        const model = new AntSqlModel('id', { prefix: 'somePrefix' }, [column], tableName);
        const autoGeneratedColumn = model.getAutoGeneratedColumn();
        expect(autoGeneratedColumn.autoGenerationStrategy).toBe(column.autoGenerationStrategy);
        expect(autoGeneratedColumn.entityAlias).toBe(column.entityAlias);
        expect(autoGeneratedColumn.refAlias).toBe(column.refAlias);
        expect(autoGeneratedColumn.sqlName).toBe(column.sqlName);
        expect(autoGeneratedColumn.type).toBe(column.type);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustListColumns(): void {
    const itsName = 'itMustListColumns';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
          type: SqlType.Integer,
        };
        const model = new AntSqlModel('id', { prefix: 'somePrefix' }, [column], tableName);

        const modelColumn = [...model.columns].find((c) => c.entityAlias === column.entityAlias);

        expect(modelColumn.autoGenerationStrategy).toBe(column.autoGenerationStrategy);
        expect(modelColumn.entityAlias).toBe(column.entityAlias);
        expect(modelColumn.refAlias).toBe(column.refAlias);
        expect(modelColumn.sqlName).toBe(column.sqlName);
        expect(modelColumn.type).toBe(column.type);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustNotAllowMultipleAutogeneratedColumns(): void {
    const itsName = 'mustNotAllowMultipleAutogeneratedColumns';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column1: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
          type: SqlType.Integer,
        };
        const column2: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'name',
          sqlName: 'name',
          type: SqlType.String,
        };
        expect(() => new AntSqlModel('id', { prefix: 'somePrefix' }, [column1, column2], tableName)).toThrowError();
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustNotGetAnAutogeneratedColumn(): void {
    const itsName = 'mustNotGetAnAutogeneratedColumn';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
          ],
          tableName,
        );
        expect(model.getAutoGeneratedColumn()).toBeNull();
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustTransformEntityIntoPrimaryWithReferenceField(): void {
    it(
      'must transform an entity with a reference field into a primary',
      async (done) => {
        const refTableName = 'RefModelSqlTableName';
        const tableName = 'ModelSqlTableName';
        const refModel = new AntSqlModel(
          'id',
          { prefix: 'someRefPrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
          ],
          refTableName,
          'ref-alias',
        );
        const referenceColumnAlias = 'reference';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
            {
              entityAlias: 'number',
              sqlName: 'number',
              type: SqlType.Integer,
            },
            {
              entityAlias: referenceColumnAlias,
              refAlias: refModel.alias,
              sqlName: 'reference',
              type: SqlType.Integer,
            },
          ],
          tableName,
        );
        model.columnByAlias(referenceColumnAlias).refModel = refModel;
        const entity: any = {
          id: 0,
          number: 0,
          reference: {
            entity: null,
            id: 1,
          },
        };
        const primary = model.entityToPrimary(entity);

        expect(primary.id).toBe(entity.id);
        expect(primary.number).toBe(entity.number);
        expect(primary.reference).toBe(entity.reference.id);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustTransformMultipleEntityIntoPrimaryWithReferenceField(): void {
    it(
      'must transform multiple entities with a reference field into primaries',
      async (done) => {
        const refTableName = 'RefModelSqlTableName';
        const tableName = 'ModelSqlTableName';
        const refModel = new AntSqlModel(
          'id',
          { prefix: 'someRefPrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
          ],
          refTableName,
          'ref-alias',
        );
        const referenceColumnAlias = 'reference';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
            {
              entityAlias: 'number',
              sqlName: 'number',
              type: SqlType.Integer,
            },
            {
              entityAlias: referenceColumnAlias,
              refAlias: refModel.alias,
              sqlName: 'reference',
              type: SqlType.Integer,
            },
          ],
          tableName,
        );
        model.columnByAlias(referenceColumnAlias).refModel = refModel;
        const entity: any = {
          id: 0,
          number: 0,
          reference: {
            entity: null,
            id: 1,
          },
        };
        const [primary] = model.mEntityToPrimary([entity]);

        expect(primary.id).toBe(entity.id);
        expect(primary.number).toBe(entity.number);
        expect(primary.reference).toBe(entity.reference.id);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustTransformMultiplePrimaryIntoEntityWithDateField(): void {
    const itsName = 'mustTransformMultiplePrimaryIntoEntityWithDateField';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
            {
              entityAlias: 'date',
              sqlName: 'date',
              type: SqlType.Date,
            },
          ],
          tableName,
        );
        const primary = {
          date: '2019-01-01',
          id: 0,
        };
        const [entity] = model.mPrimaryToEntity([primary]);
        expect(entity.id).toBe(primary.id);
        expect(entity.date).toEqual(new Date(primary.date));
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustTransformMultiplePrimaryIntoEntityWithReferenceField(): void {
    it(
      'must transform multiple primary with reference field into entity',
      async (done) => {
        const refTableName = 'RefModelSqlTableName';
        const tableName = 'ModelSqlTableName';
        const refModel = new AntSqlModel(
          'id',
          { prefix: 'someRefPrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
          ],
          refTableName,
          'ref-alias',
        );
        const referenceColumnAlias = 'reference';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
            {
              entityAlias: 'number',
              sqlName: 'number',
              type: SqlType.Integer,
            },
            {
              entityAlias: referenceColumnAlias,
              refAlias: refModel.alias,
              sqlName: 'reference',
              type: SqlType.Integer,
            },
          ],
          tableName,
        );
        model.columnByAlias(referenceColumnAlias).refModel = refModel;
        const primary = {
          id: 0,
          number: 0,
          reference: 1,
        };
        const [entity] = model.mPrimaryToEntity([primary]);

        expect(entity.id).toBe(primary.id);
        expect(entity.number).toBe(primary.number);
        expect((entity.reference as Reference<Entity, number>).id).toBe(primary.reference);

        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustTransformMultipleSecondaryIntoEntityWithReferenceField(): void {
    it(
      'must transform multiple secondary with reference field into entity',
      async (done) => {
        const refTableName = 'RefModelSqlTableName';
        const tableName = 'ModelSqlTableName';
        const refModel = new AntSqlModel(
          'id',
          { prefix: 'someRefPrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
          ],
          refTableName,
          'ref-alias',
        );
        const referenceColumnAlias = 'reference';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
            {
              entityAlias: 'number',
              sqlName: 'number',
              type: SqlType.Integer,
            },
            {
              entityAlias: referenceColumnAlias,
              refAlias: refModel.alias,
              sqlName: 'reference',
              type: SqlType.Integer,
            },
          ],
          tableName,
        );
        model.columnByAlias(referenceColumnAlias).refModel = refModel;
        const secondary = {
          id: 0,
          number: 0,
          reference: 1,
        };
        const [entity] = model.mSecondaryToEntity([secondary]);

        expect(entity.id).toBe(secondary.id);
        expect(entity.number).toBe(secondary.number);
        expect((entity.reference as Reference<Entity, number>).id).toBe(secondary.reference);

        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustTransformPrimaryIntoEntityWithDateField(): void {
    const itsName = 'mustTransformPrimaryIntoEntityWithDateField';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
            {
              entityAlias: 'date',
              sqlName: 'date',
              type: SqlType.Date,
            },
          ],
          tableName,
        );
        const primary = {
          date: '2019-01-01',
          id: 0,
        };
        const entity = model.primaryToEntity(primary);
        expect(entity.id).toBe(primary.id);
        expect(entity.date).toEqual(new Date(primary.date));
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustTransformPrimaryIntoEntityWithReferenceField(): void {
    it(
      'must transform primary with reference field into entity',
      async (done) => {
        const refTableName = 'RefModelSqlTableName';
        const tableName = 'ModelSqlTableName';
        const refModel = new AntSqlModel(
          'id',
          { prefix: 'someRefPrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
          ],
          refTableName,
          'ref-alias',
        );
        const referenceColumnAlias = 'reference';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
            {
              entityAlias: 'number',
              sqlName: 'number',
              type: SqlType.Integer,
            },
            {
              entityAlias: referenceColumnAlias,
              refAlias: refModel.alias,
              sqlName: 'reference',
              type: SqlType.Integer,
            },
          ],
          tableName,
        );
        model.columnByAlias(referenceColumnAlias).refModel = refModel;
        const primary = {
          id: 0,
          number: 0,
          reference: 1,
        };
        const entity = model.primaryToEntity(primary);

        expect(entity.id).toBe(primary.id);
        expect(entity.number).toBe(primary.number);
        expect((entity.reference as Reference<Entity, number>).id).toBe(primary.reference);

        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustTransformSecondaryIntoEntityWithReferenceField(): void {
    it(
      'must transform secondary with reference field into entity',
      async (done) => {
        const refTableName = 'RefModelSqlTableName';
        const tableName = 'ModelSqlTableName';
        const refModel = new AntSqlModel(
          'id',
          { prefix: 'someRefPrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
          ],
          refTableName,
          'ref-alias',
        );
        const referenceColumnAlias = 'reference';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
            {
              entityAlias: 'number',
              sqlName: 'number',
              type: SqlType.Integer,
            },
            {
              entityAlias: referenceColumnAlias,
              refAlias: refModel.alias,
              sqlName: 'reference',
              type: SqlType.Integer,
            },
          ],
          tableName,
        );
        model.columnByAlias(referenceColumnAlias).refModel = refModel;
        const secondary = {
          id: 0,
          number: 0,
          reference: 1,
        };
        const entity = model.secondaryToEntity(secondary);

        expect(entity.id).toBe(secondary.id);
        expect(entity.number).toBe(secondary.number);
        expect((entity.reference as Reference<Entity, number>).id).toBe(secondary.reference);

        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }
}
