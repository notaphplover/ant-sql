import { Test } from '@antjs/ant-js/build/testapi/api/test';
import { AntSqlModel } from '../../model/ant-sql-model';
import { AutoGeneratedStrategyMode } from '../../model/auto-generation-strategy-mode';
import { SqlColumn } from '../../model/sql-column';
import { SqlType } from '../../model/sql-type';

const MAX_SAFE_TIMEOUT = Math.pow(2, 31) - 1;

export class AntSqlModelTest implements Test {
  /**
   * Declare name for the test
   */
  protected _declareName: string;

  public constructor() {
    this._declareName = AntSqlModelTest.name;
  }

  public performTests(): void {
    describe(this._declareName, () => {
      this._itMustBeInitializable();
      this._itMustGetAColumnByAlias();
      this._itMustGetAColumnBySqlAlias();
      this._itMustGetInitialValues();
      this._itMustGetAnAutogeneratedColumn();
      this._itMustListColumns();
      this._itMustNotAllowMultipleAutogeneratedColumns();
      this._itMustNotGetAnAutogeneratedColumn();
      this._itMustTransformMPrimaryIntoEntity();
      this._itMustTransformPrimaryIntoEntity();
    });
  }

  private _itMustBeInitializable(): void {
    const itsName = 'mustBeInitializable';
    it(
      itsName,
      async (done) => {
        expect(() => {
          // tslint:disable-next-line:no-unused-expression
          new AntSqlModel(
            'id',
            { prefix: 'somePrefix' },
            [
              {
                entityAlias: 'id',
                sqlName: 'id',
                type: SqlType.Integer,
              },
            ],
            'ModelSqlTableName',
          );
        }).not.toThrowError();
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustGetAColumnByAlias(): void {
    const itsName = 'mustGetAColumnByAlias';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
          type: SqlType.Integer,
        };
        const column2: SqlColumn = {
          entityAlias: 'someColumn',
          sqlName: 'some_column',
          type: SqlType.String,
        };
        const model = new AntSqlModel('id', { prefix: 'somePrefix' }, [column, column2], tableName);
        expect(model.columnByAlias(column2.entityAlias)).toEqual(column2);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustGetAColumnBySqlAlias(): void {
    const itsName = 'mustGetAColumnByAlias';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
          type: SqlType.Integer,
        };
        const column2: SqlColumn = {
          entityAlias: 'someColumn',
          sqlName: 'some_column',
          type: SqlType.String,
        };
        const model = new AntSqlModel('id', { prefix: 'somePrefix' }, [column, column2], tableName);
        expect(model.columnBySql(column2.sqlName)).toEqual(column2);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustGetInitialValues(): void {
    const itsName = 'mustGetInitialValues';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
          ],
          tableName,
        );
        expect(model.tableName).toBe(tableName);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustGetAnAutogeneratedColumn(): void {
    const itsName = 'mustGetAnAutogeneratedColumn';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
          type: SqlType.Integer,
        };
        const model = new AntSqlModel('id', { prefix: 'somePrefix' }, [column], tableName);
        expect(model.getAutoGeneratedColumn()).toEqual(column);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustListColumns(): void {
    const itsName = 'itMustListColumns';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
          type: SqlType.Integer,
        };
        const model = new AntSqlModel('id', { prefix: 'somePrefix' }, [column], tableName);
        expect([...model.columns]).toContain(column);
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustNotAllowMultipleAutogeneratedColumns(): void {
    const itsName = 'mustNotAllowMultipleAutogeneratedColumns';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const column1: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'id',
          sqlName: 'id',
          type: SqlType.Integer,
        };
        const column2: SqlColumn = {
          autoGenerationStrategy: AutoGeneratedStrategyMode.AutoIncrement,
          entityAlias: 'name',
          sqlName: 'name',
          type: SqlType.String,
        };
        expect(() => new AntSqlModel('id', { prefix: 'somePrefix' }, [column1, column2], tableName)).toThrowError();
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustNotGetAnAutogeneratedColumn(): void {
    const itsName = 'mustNotGetAnAutogeneratedColumn';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
          ],
          tableName,
        );
        expect(model.getAutoGeneratedColumn()).toBeNull();
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustTransformMPrimaryIntoEntity(): void {
    const itsName = 'mustTransformMPrimaryIntoEntity';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
            {
              entityAlias: 'date',
              sqlName: 'date',
              type: SqlType.Date,
            },
          ],
          tableName,
        );
        const primary = {
          date: '2019-01-01',
          id: 0,
        };
        const [entity] = model.mPrimaryToEntity([primary]);
        expect(entity.id).toBe(primary.id);
        expect(entity.date).toEqual(new Date(primary.date));
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }

  private _itMustTransformPrimaryIntoEntity(): void {
    const itsName = 'mustTransformPrimaryIntoEntity';
    it(
      itsName,
      async (done) => {
        const tableName = 'ModelSqlTableName';
        const model = new AntSqlModel(
          'id',
          { prefix: 'somePrefix' },
          [
            {
              entityAlias: 'id',
              sqlName: 'id',
              type: SqlType.Integer,
            },
            {
              entityAlias: 'date',
              sqlName: 'date',
              type: SqlType.Date,
            },
          ],
          tableName,
        );
        const primary = {
          date: '2019-01-01',
          id: 0,
        };
        const entity = model.primaryToEntity(primary);
        expect(entity.id).toBe(primary.id);
        expect(entity.date).toEqual(new Date(primary.date));
        done();
      },
      MAX_SAFE_TIMEOUT,
    );
  }
}
